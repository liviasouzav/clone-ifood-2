import sqlite3
import re
from datetime import datetime # Para armazenar o último login

# Classe para o Banco de Dados
class BancoDeDados:
    def __init__(self, nome_banco='new_file.db'):
        self.conn = sqlite3.connect(nome_banco)
        self.cursor = self.conn.cursor()
        self.criar_tabelas()

    def buscar_cliente_por_email(self, email):
        self.cursor.execute("SELECT * FROM clientes WHERE email = ?", (email,))
        return self.cursor.fetchone()

    def atualizar_ultimo_login(self, email, ultimo_login):
        self.cursor.execute("UPDATE clientes SET ultimo_login = ? WHERE email = ?", (ultimo_login, email))
        self.conn.commit()

    def deletar_cliente(self, email):
        self.cursor.execute("DELETE FROM clientes WHERE email = ?", (email,))
        self.conn.commit()

    def listar_restaurantes(self):
        self.cursor.execute("SELECT * FROM restaurantes ORDER BY comissao DESC")
        return self.cursor.fetchall()

    def inserir_cliente(self, nome, email, senha):
        self.cursor.execute("INSERT INTO clientes (nome, email, senha) VALUES (?, ?, ?)", (nome, email, senha))
        self.conn.commit()

    def email_ja_cadastrado(self, email):
        self.cursor.execute("SELECT * FROM clientes WHERE email = ?", (email,))
        return self.cursor.fetchone() is not None

    def criar_tabelas(self):
        # Criar tabela de usuários com nome, email, senha e data do último login
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS usuarios (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                senha TEXT NOT NULL,
                ultimo_login TEXT,
                nome_restaurante TEXT NOT NULL,
                comissao INTEGER CHECK(comissao >= 0)
            )
        ''')
        # Criar tabela de produtos com uma foreign key referenciando o ID do usuário
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS produtos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL,
                preco REAL NOT NULL CHECK(preco > 0),
                usuario_id INTEGER NOT NULL,
                FOREIGN KEY(usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
            )
        ''')

        self.cursor.execute('''
                    CREATE TABLE IF NOT EXISTS clientes (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT NOT NULL,
                        email TEXT NOT NULL UNIQUE,
                        senha TEXT NOT NULL,
                        ultimo_login TEXT
                    )
                ''')

        self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS vendas(
                id_cliente INTEGER,
                venda_id INTEGER,
                id_produto INTEGER,
                nome_produto TEXT,
                momento_compra DATE,
                quantidade INTEGER ,
                preco_total REAL,
                FOREIGN KEY (id_cliente) REFERENCES cadastro_cliente(id)

                )
                ''')

        self.conn.commit()

    def commit(self):
        self.conn.commit()

    def close(self):
        self.conn.close()


# Classe para o Usuário
class Usuario: # cria o classe usuario
    def __init__(self, db):
        self.db = db

    def cadastrar_usuario(self): # função cadastro do usario
        cursor = self.db.cursor
        while True:
            nome = input("Informe o seu nome: ")

            while True:
                nome_restaurante = input("Nome do Restaurante (deve ter mais de 10 caracteres): ").strip()
                if len(nome_restaurante) <= 10: # faz com que o restaurante não possa ter menos de 10 chars
                    print("O nome do restaurante deve ter mais de 10 caracteres.\n")
                    input("Pressione Enter para continuar...")
                else:
                    break

            while True:
                try:
                    comissao = int(input("Informe a comissão (inteira e >= 0): "))
                    if comissao < 0 or comissao > 100: #comissão deve ser entre 0 a 100
                        raise ValueError
                    break
                except ValueError:   # except para o programa não quebrar
                    print("Valor inválido. A comissão deve ser um número inteiro maior ou igual a 0.\n")
                    input("Pressione Enter para continuar...")

            while True:
                email = input("Informe o seu e-mail: ").strip().lower()
                if not validar_email(email): # clama a função para validar o email
                    print("E-mail inválido. Tente novamente.\n")
                    input("Pressione Enter para continuar...")
                    continue

                cursor.execute("SELECT * FROM usuarios WHERE email = ?", (email,))
                if cursor.fetchone(): #verifica se o email já está cadastrado
                    print("Este e-mail já está cadastrado. Tente outro.\n")
                    input("Pressione Enter para continuar...")
                else:
                    break # sai do loop

            while True:
                senha = input("Escolha uma senha (min. 5 caracteres, deve ter 1 minúscula, 1 maiúscula, 1 número): ")
                if not validar_senha(senha):
                    print("A senha não atende aos requisitos. Tente novamente.\n")
                    input("Pressione Enter para continuar...")
                else:
                    break  # sai do loop

            ultimo_login = None
            cursor.execute('''
                INSERT INTO usuarios (nome, email, senha, ultimo_login, nome_restaurante, comissao)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (nome, email, senha, ultimo_login, nome_restaurante, comissao))
            self.db.commit() # insere o dados novos no banco
            print("Usuário cadastrado com sucesso!\n")
            input("Pressione Enter para continuar...")
            break

    def login(self): # função responsável pelo login
        cursor = self.db.cursor
        while True:
            email = input("E-mail: ").strip().lower()
            senha = input("Senha: ")

            cursor.execute("SELECT * FROM usuarios WHERE email = ? AND senha = ?", (email, senha))
            usuario = cursor.fetchone()
            if usuario: # faz o login e imprime de forma formatada o ultimo_login onde esta armazenada a hora e data
                ultimo_login = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                cursor.execute("UPDATE usuarios SET ultimo_login = ? WHERE id = ?", (ultimo_login, usuario[0]))
                self.db.commit()
                print(f"Login realizado com sucesso! Bem-vindo, {usuario[1]}.\n")
                input("Pressione Enter para continuar...")
                return usuario[0]
            else: # se os dados forem incorretos executa esse else e pergunta se o usuario deseja tentar novamente
                print("E-mail ou senha incorretos.\n")
                retry = input("Deseja tentar novamente? (s/n): ").lower()
                if retry != 's':
                    return None


# Classe para Produtos
class Produto:
    def __init__(self, db):
        self.db = db

    def listar_produtos(self, usuario_id):
        cursor = self.db.cursor
        cursor.execute("SELECT id, nome, preco FROM produtos WHERE usuario_id = ?", (usuario_id,))
        produtos = cursor.fetchall() #produto buscam as informações da tabela produtos

        if produtos:
            print("\nProdutos cadastrados:")
            print(f"{'ID':<5} {'Nome':<30} {'Preço (R$)':<10}")
            print("-" * 50)
            for produto in produtos:
                id_produto, nome, preco = produto
                print(f"{id_produto:<5} {nome:<30} {preco:<10.2f}")
            print('-' * 50)
            quantidade_produtos = len(produtos)
            print(f'Quantidade total de produtos: {quantidade_produtos}\n\n') #indica a quantidade total de produtos na tabela
        else:
            print('\nNenhum produto cadastrado.')
            quantidade_produtos = 0

        return produtos

    def adicionar_produto(self, usuario_id): # função de adicionar um novo produto
        cursor = self.db.cursor
        while True:
            nome = input("Nome do Produto (deve ter pelo menos 5 letras): ").strip()

            if not validar_nome_produto(nome): # faz com que o nome não possa ter menos de 5 chars
                print("O nome do produto deve ter pelo menos 5 letras e conter apenas letras.\n")
                input("Pressione Enter para continuar...")
                continue

            while True:
                try:
                    preco = float(input("Preço do Produto (deve ser um valor positivo): "))
                    if not validar_preco(preco): # busca função que confere se é positivo
                        raise ValueError
                    break
                except ValueError:
                    print("Valor inválido. O preço deve ser um número positivo.\n")
                    input("Pressione Enter para continuar...")

            cursor.execute("INSERT INTO produtos (nome, preco, usuario_id) VALUES (?, ?, ?)", (nome, preco, usuario_id)) # insere os dados na tabela
            self.db.commit()
            print("Produto adicionado com sucesso!\n")
            input("Pressione Enter para continuar...")
            break

    def remover_produto(self, usuario_id): # função que remove os produtos
        self.listar_produtos(usuario_id)
        cursor = self.db.cursor
        while True:
            try:
                id_produto = int(input("\nInforme o ID do produto que deseja remover: "))
                cursor.execute("SELECT * FROM produtos WHERE id = ? AND usuario_id = ?", (id_produto, usuario_id))
                produto = cursor.fetchone() # recebe as informações da tabela
                if not produto: # se o produto não for encontrado executa aqui
                    print("Produto não encontrado ou não pertence a você. Tente novamente.\n")
                    input("Pressione Enter para continuar...")
                    continue

                cursor.execute("DELETE FROM produtos WHERE id = ?", (id_produto,)) # deleta produto da tabela
                self.db.commit()
                print("Produto removido com sucesso!\n")
                input("Pressione Enter para continuar...")
                break
            except ValueError: # através de um except se dar erro para o programa não quebrar
                print("Valor inválido. Informe um ID numérico.\n")
                input("Pressione Enter para continuar...")

    def alterar_comissao(self, restaurante_id):
        cursor = self.db.cursor # Acessa o cursor da conexão do banco de dados armazenada em self.db
        valor_comissao = input('Digite o valor da nova comissão: ')
        while not valor_comissao.isdigit() or int(valor_comissao) < 0 or int(valor_comissao) > 70: # comissao deve estar entre 0 e 70
            print('O valor deve ser um número e entre 0 e 70.')
            valor_comissao = input('Digite o novo valor da comissão: ')
        valor_comissao = int(valor_comissao)

        cursor.execute('SELECT * FROM usuarios WHERE id = ?', (restaurante_id,))
        mudar_comissao = cursor.fetchone()
        print('Valor atual da comissão:', mudar_comissao[6], '%') # imprime o valor atual da comissão antes de mudar

        if mudar_comissao:
            confirmacao = input(f'Tem certeza de que deseja mudar a comissão para {valor_comissao}%? (s/n): ')
            if confirmacao.lower() == 's': # confirma a mudança da comissão
                cursor.execute('UPDATE usuarios SET comissao = ? WHERE id = ?', (valor_comissao, restaurante_id))
                self.db.commit()
                print(f'\nA comissão foi alterada com sucesso para {valor_comissao}!\n')
        else:
            print('Restaurante não encontrado.')


# Função principal com o menu
def menu_principal(db):
    usuario = Usuario(db)
    produto = Produto(db)

    while True:
        print("Menu Principal") # opção de cadastro e login
        print("1. Cadastrar Usuário")
        print("2. Login")
        print("3. Sair")

        escolha = input("Escolha uma opção: ")
        if escolha == '1':
            usuario.cadastrar_usuario()
        elif escolha == '2':
            usuario_id = usuario.login()
            if usuario_id is not None:
                while True:
                    produto.listar_produtos(usuario_id)
                    print("Menu do Usuário")
                    print("1. Adicionar Produto")
                    print("2. Apagar produto")
                    print("3. Alterar comissão")
                    print("4. Sair")

                    opcao = input("Escolha uma opção: ") # opções do menu

                    if opcao == '1':
                        produto.adicionar_produto(usuario_id) # busca a função adicionar produto
                    elif opcao == '2':
                        produto.remover_produto(usuario_id) #busca a função remover produto
                        input("\nPressione Enter para voltar ao menu.")
                    elif opcao == '3':
                        produto.alterar_comissao(usuario_id)
                    elif opcao == '4': # sai do loop
                        print("Saindo do sistema...")
                        break
                    else:
                        print("Opção inválida. Tente novamente.")
            else:
                print("Falha no login. Retornando ao menu principal.\n")
        elif escolha == '4':# sai do loop
            print("Saindo do sistema...")
            break
        else:
            print("Opção inválida. Tente novamente.")


# Função de validação de email
def validar_email(email):# confere se o email esta correta através do REGEX
    regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(regex, email)


# Função de validação de senha
def validar_senha(senha): # confere se a senha esta correta através do REGEX
    if len(senha) < 5:
        return False
    if not re.search(r'[a-z]', senha):
        return False
    if not re.search(r'[A-Z]', senha):
        return False
    if not re.search(r'[0-9]', senha):
        return False
    return True


# Função de validação de nome do produto
def validar_nome_produto(nome): # nome com mais de 5 chars
    if len(nome) < 5:
        return False
    return nome.isalpha()


# Função de validação de preço do produto
def validar_preco(preco): # preço numerro positivo
    return preco > 0

# > Tela Inicial <
# 1 - Cadastrar cliente
# 2 - Login

# 1 - Cadastro cliente
# Solicite: nome completo, email e senha.

# 2 - Login
# Solicite: email, senha.





class Cliente:
    def __init__(self, nome, email, senha):
        self.nome = nome
        self.email = email.lower()  # Converte para lowercase
        self.senha = senha

    @staticmethod
    def validar_nome(nome):
        if len(nome.split()) < 2 or not all(x.isalpha() or x.isspace() for x in nome):
            return False
        return True

    @staticmethod
    def validar_email(email):
        padrao_email = r'^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-z]+$'
        if re.match(padrao_email, email):
            return True
        return False

    @staticmethod
    def validar_senha(senha):
        if (len(senha) >= 5 and
            re.search(r'[A-Z]', senha) and
            re.search(r'[a-z]', senha) and
            re.search(r'[0-9]', senha) and
            re.search(r'[!@#$%^&*(),.?":{}|<>]', senha)):
            return True
        return False


class Sistema:
    def __init__(self):
        self.db = BancoDeDados()
        self.carrinho = []
        self.id = None
        self.cursor = self.db.cursor


    def cadastrar_cliente(self):
        print("Cadastro de Cliente")

        while True:
            nome = input("Digite o nome completo do cliente: ")
            if Cliente.validar_nome(nome):
                break
            else:
                print("Erro: Nome inválido! O nome completo deve conter pelo menos um nome e um sobrenome, apenas letras.")

        while True:
            email = input("Digite o email do cliente: ").lower()  # Converte para lowercase
            if not Cliente.validar_email(email):
                print("Erro: Email inválido! O formato deve ser: [a-zA-Z0-9]@[a-zA-Z0-9].[a-z].")
            elif self.db.email_ja_cadastrado(email):
                print("Erro: Email já cadastrado! Tente usar outro email.")
            else:
                break

        while True:
            senha = input("Digite a senha do cliente: ")
            if Cliente.validar_senha(senha):
                break
            else:
                print("Erro: Senha inválida! A senha deve ter pelo menos 5 caracteres, incluindo uma letra maiúscula, uma minúscula, um número e um caractere especial.")

        cliente = Cliente(nome, email, senha)
        self.db.inserir_cliente(cliente.nome, cliente.email, cliente.senha)
        print("Cadastro realizado com sucesso!")

    def login_cliente(self):
        print("\nLogin de Cliente")
        email = input("Digite o email do cliente: ").lower()  # Converte para lowercase
        senha = input("Digite a senha do cliente: ")

        cliente = self.db.buscar_cliente_por_email(email)

        if cliente and cliente[3] == senha:  # Verifica se a senha está correta
            ultimo_login = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.db.atualizar_ultimo_login(email, ultimo_login)
            print(f"Login realizado com sucesso! Bem-vindo(a), {cliente[1]}.")
            print(f"Último login registrado em: {ultimo_login}")
            # Busca todos os restaurantes cadastrados
            self.db.cursor.execute('SELECT id, nome_restaurante FROM usuarios ORDER BY comissao DESC')
            restaurantes = self.db.cursor.fetchall()



            if restaurantes:
                print("Restaurantes disponíveis:")
                print(f"{'ID':<5} {'Nome':<30}")
                print("-" * 50)
                for id_restaurante, nome_restaurante in restaurantes:
                    print(f"{id_restaurante:<5} {nome_restaurante:<30}")
                print('-' * 50)
                print('0 - Para voltar ao menu anterior\n')

                # Solicita ao cliente que escolha um restaurante pelo ID
                restaurante_id = input("Digite o ID do restaurante que deseja escolher: ")
                if restaurante_id == '0':
                    self.cadastro_cliente()

                # Buscando os IDs dos usuários
                self.db.cursor.execute('SELECT id FROM usuarios')
                usuarios = self.db.cursor.fetchall()  # Lista de tuplas com apenas um elemento

                # Verifica se há usuários cadastrados
                if not usuarios:
                    print("Nenhum usuário cadastrado.")
                    return  # Ou redirecione para outra parte do seu fluxo

                # Valida a entrada do usuário
                if restaurante_id.isdigit() and int(restaurante_id) in [id[0] for id in
                                                                        usuarios]:  # Apenas pega o primeiro elemento de cada tupla
                    self.current_restaurant_id = int(restaurante_id)
                    print(f"Restaurante escolhido: {nome_restaurante}")
                    self.exibir_produtos()
                    # Aqui você pode chamar a função que exibe os produtos desse restaurante
                else:
                    print("ID de restaurante inválido. Tente novamente.")

                    # Aqui você pode chamar a função que exibe os produtos desse restaurante

                    resp3 = 0

            else:
                print("\nNenhum restaurante cadastrado, pedimos desculpas.\nVolte sempre!!")
                self.cadastro_cliente()

        else:
            print("Erro: Email ou senha incorretos!")

    def exibir_produtos(self):

        if self.current_restaurant_id is not None:
            try:
                self.db.cursor.execute(
                    'SELECT id, nome, preco FROM produtos WHERE usuario_id = ?',
                    (self.current_restaurant_id,))
                produtos = self.db.cursor.fetchall()



                if produtos:
                    print('Bem vindo ao carrinho de pedidos\n')
                else:
                    print("Nenhum produto cadastrado para este restaurante.")
                    return

            except sqlite3.Error as e:
                print(f'Ocorreu um erro ao buscar os produtos: {e}')
                return

            # Loop para gerenciar o carrinho
            while True:
                print("\nProdutos disponíveis:")
                print(f"{'ID':<5} {'Nome':<30} {'Preço (R$)':<10}")
                print("-" * 50)

                for id_produto, nome, preco in produtos:
                    print(f"{id_produto:<5} {nome:<30} {preco:<10.2f}")

                print('-' * 50)

                print('\nQual produto você deseja? (Digite "A" para voltar ou "F" para finalizar a venda)')
                entrada = input().strip()

                if entrada.upper() == 'A':
                    print("Voltando à lista de restaurantes...")
                    raise ReturnToMain()


                elif entrada.upper() == 'F':

                    if self.carrinho:

                        # Calcula o subtotal somando os preços dos produtos no carrinho

                        subtotal = sum(item[3] for item in self.carrinho)  # item[3] é o preço total de cada produto
                        self.finalizar_venda(subtotal, self.id, self.current_restaurant_id, )
                        # Chama finalizar_venda passando o subtotal

                        return  # Após finalizar a venda, retorna

                    else:

                        print("O carrinho está vazio. Não é possível finalizar a venda.")

                elif entrada.isnumeric():
                    produto_id = int(entrada)

                    # Verifica se o ID do produto está na lista de produtos
                    for id_produto, nome, preco in produtos:
                        if produto_id == id_produto:
                            quantidade_desejada = input('Digite a quantidade desejada: ').strip()

                            # Garantir que a entrada da quantidade seja um número válido
                            while not quantidade_desejada.isdigit():
                                quantidade_desejada = input('Por favor, insira uma quantidade válida: ').strip()

                            quantidade_desejada = int(quantidade_desejada)

                            # Verificar se a quantidade desejada é 0
                            if quantidade_desejada == 0:
                                # Se a quantidade for 0, remover o item do carrinho (se já estiver no carrinho)
                                for i, (item_id, item_nome, item_quantidade, item_preco) in enumerate(self.carrinho):
                                    if item_id == produto_id:
                                        self.carrinho.pop(i)
                                        print(f"{item_nome} foi removido do carrinho.")
                                        break
                                else:
                                    # Se o produto não estava no carrinho, informar que não foi adicionado
                                    print(f"{nome} não foi adicionado ao carrinho, pois a quantidade é 0.")
                                continue  # Voltar ao início do loop para nova interação sem adicionar ao carrinho

                            # Verificar se o produto já está no carrinho
                            for i, (item_id, item_nome, item_quantidade, item_preco) in enumerate(self.carrinho):
                                if item_id == produto_id:
                                    # Somar a nova quantidade com a quantidade existente
                                    nova_quantidade = item_quantidade + quantidade_desejada
                                    novo_preco = nova_quantidade * preco
                                    self.carrinho[i] = (item_id, item_nome, nova_quantidade, novo_preco)
                                    print(f"A quantidade de {item_nome} foi atualizada para {nova_quantidade}.")
                                    break
                            else:
                                preco_total = quantidade_desejada * preco
                                self.carrinho.append((produto_id, nome, quantidade_desejada, preco_total))
                                print(f"{nome} foi adicionado ao carrinho com {quantidade_desejada} unidades.")

                            print('\nProdutos no carrinho:')
                            print(f"{'Nome':<30} {'Quantidade':<10} {'Preço (R$)':<10}")
                            print("-" * 50)

                            for item_id, item_nome, item_quantidade, item_preco in self.carrinho:
                                print(f"{item_nome:<30} {item_quantidade:<10} {item_preco:<10.2f}")

                            # Exibir subtotal do carrinho
                            subtotal = sum(item[3] for item in self.carrinho)  # Soma o valor total de todos os itens
                            print('-' * 50)
                            print(f"Subtotal: {subtotal:.2f} R$")
                            print('-' * 50)

                            break
                    else:
                        print("Produto não encontrado.")
                else:
                    print("Por favor, insira um ID de produto válido ou 'A'/'F'.")

    def finalizar_venda(self, subtotal, current_cliente_id, restaurante_id):
        # Consultar o maior venda_id atual
        self.db.cursor.execute('SELECT MAX(venda_id) FROM vendas')
        resultado = self.db.cursor.fetchone()[0]

        # Se não houver vendas, comece em 1
        if resultado is None:
            resultado = 1
        else:
            resultado += 1  # Adiciona 1 ao maior venda_id
        try:
            momento_compra = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.db.cursor.execute('SELECT id, nome_restaurante FROM usuarios WHERE id = ?', (restaurante_id,))
            restaurantes = self.db.cursor.fetchall()

            # Limpa a tela e exibe os restaurantes

            print("Restaurante selecionado:")
            for id_restaurante, nome in restaurantes:
                print(f"{id_restaurante:<5} {nome:<30}")
            print('-' * 50)

            print('Produtos totais do carrinho:')
            print(f"{'Nome':<30} {'Quantidade':<10} {'Preço (R$)':<10}")
            print("-" * 50)

            for item_id, item_nome, item_quantidade, item_preco in self.carrinho:
                print(f"{item_nome:<30} {item_quantidade:<10} {item_preco:<10.2f}")

            # Exibir subtotal do carrinho
            subtotal = sum(item[3] for item in self.carrinho)  # Soma o valor total de todos os itens
            print('-' * 50)
            print(f"Total da compra: {subtotal:.2f} R$")
            print('-' * 50)
            # Obter o último venda_id inserido
            venda_id = self.cursor.lastrowid

            # Inserir os detalhes para cada produto no carrinho
            for id_produto, nome, quantidade, preco in self.carrinho:
                preco_total = preco
                self.cursor.execute('''
                       INSERT INTO vendas (id_cliente,venda_id, id_produto, nome_produto, momento_compra, quantidade, preco_total)
                       VALUES (?,?,?, ?, ?, ?, ?)
                   ''', (current_cliente_id, resultado, id_produto, nome, momento_compra, quantidade, preco_total))

            # Confirmar a transação
            self.db.conn.commit()
            print("Venda finalizada com sucesso!\n")

            # Limpar o carrinho após a venda
            self.carrinho.clear()
            self.cursor.execute('''
                                       SELECT venda_id, nome_produto, momento_compra, quantidade, preco_total
                                       FROM vendas
                                       WHERE id_cliente = ?
                                       ORDER BY momento_compra DESC
                                   ''', (current_cliente_id,))

            vendas = self.cursor.fetchall()

            if vendas:
                print(f"\nVendas do Cliente ID {current_cliente_id}:")
                print(
                    f"{'Venda ID':<10} {'Produto':<30} {'Data e Hora':<20} {'Quantidade':<10} {'Preço Total (R$)':<10}")
                print("-" * 100)

                for venda in vendas:
                    venda_id, nome_produto, momento_compra, quantidade, preco_total = venda
                    print(
                        f"{venda_id:<10} {nome_produto:<30} {momento_compra:<20} {quantidade:<10} {preco_total:<10.2f}")

                print("-" * 100)
                print('')
            else:
                print(f"Nenhuma venda encontrada para o Cliente ID {current_cliente_id}.")
        except sqlite3.Error as e:
            print(f'Ocorreu um erro ao buscar as vendas: {e}')

        except sqlite3.Error as e:
            print(f'Ocorreu um erro ao finalizar a venda: {e}')

    def deletar_conta(self):
        email = input("Digite o email da conta que deseja deletar: ").lower()  # Converte para lowercase
        cliente = self.db.buscar_cliente_por_email(email)

        if cliente:
            opcao_deletar = input(f"Deseja realmente deletar a conta de {cliente[1]}? (s/n): ").lower()
            if opcao_deletar == 's':
                self.db.deletar_cliente(email)
                print("Sua conta foi deletada com sucesso.")
            else:
                print("Operação de deleção cancelada.")
        else:
            print("Erro: Email não encontrado.")

    def menu(self):
        while True:
            print("\nMenu:")
            print("1. Cadastrar cliente")
            print("2. Login de cliente")
            print("3. Deletar conta")
            print("4. Sair")

            opcao = input("Escolha uma opção: ")

            if opcao == "1":
                self.cadastrar_cliente()
            elif opcao == "2":
                self.login_cliente()
            elif opcao == "3":
                self.deletar_conta()
            elif opcao == "4":
                print("Saindo...")
                self.db.close()
                break
            else:
                print("Opção inválida! Tente novamente.")


# Executa o sistema


def main():
    db = BancoDeDados()  # Mantenha a conexão aberta
    try:
        while True:  # Mantém o menu principal em um loop
            print('--- TELA INICIAL ---')
            resp1 = input('1 - Cliente\n2 - Restaurante\n3 - Encerrar o programa\n')
            while resp1 not in ['1', '2', '3']:
                resp1 = input('1 - Cliente\n2 - Restaurante\n3 - Encerrar o programa\n')

            if resp1 == '3':
                print("Saindo do programa.")
                break  # Sai do loop e finaliza o programa

            if resp1 == '2':
                menu_principal(db)
            else:
                sistema = Sistema()
                sistema.menu()
    finally:
        db.close()  # Fecha a conexão apenas ao final



# Execução do programa
if __name__ == "__main__":
    main()
